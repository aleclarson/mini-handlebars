// Generated by CoffeeScript 1.4.0

!(function(context, definition) {
  if ('function' === typeof require && typeof exports === typeof module) {
    return module.exports = definition;
  }
  return context.MiniHandlebars = definition;
})(this, (function() {
  var h;
  h = function(options, templates) {
    this.options = options != null ? options : {};
    this.templates = templates != null ? templates : {};
  };
  h.prototype.render = function(t, d) {
    var k, lvl, ssplice, tok_map, toks, xshift;
    lvl = 1;
    toks = [];
    tok_map = {};
    d = h._extend(this.options.locals, d);
    t.replace(/\{\{(\/\w+|#?\w+)( [\w, ]+)?\}\}\s*/g, function() {
      var block, close_func, level, name, tok;
      close_func = arguments[1][0] === '/';
      tok = {
        match: arguments[0],
        block: block = typeof arguments[2] === 'string',
        args: (block && arguments[2].replace(/(^ +| +$)/, '').split(/, */)) || [],
        variable: block === close_func,
        name: name = block === close_func ? arguments[1] : arguments[1][0] === '/' || arguments[1][0] === '#' ? arguments[1].slice(1) : arguments[1],
        level: level = (block === close_func && lvl) || (block && lvl++) || (close_func && --lvl),
        key: level + '.' + name,
        position: arguments[3]
      };
      if (level !== 1) {
        return arguments[0];
      }
      if (close_func) {
        toks[tok_map[tok.key]].mate = tok;
      }
      if (tok.variable || tok.block) {
        tok_map[tok.key] = toks.push(tok) - 1;
      }
      return arguments[0];
    });
    xshift = 0;
    for (k in toks) {
      if (!(toks[k].level === 1)) {
        continue;
      }
      ssplice = function(l, r) {
        t = t.substr(0, toks[k].position + xshift) + r + t.substr(toks[k].position + l + xshift);
        xshift += r.length - l;
      };
      if (toks[k].variable) {
        ssplice(toks[k].match.length, d[toks[k].name]);
      } else if (toks[k].block) {
        ssplice(toks[k].mate.position + (toks[k].mate.match.length - toks[k].position), d[toks[k].name].apply((function() {}), [t.substr(toks[k].position + toks[k].match.length + xshift, toks[k].mate.position - (toks[k].position + toks[k].match.length)), d].concat(toks[k].args)));
      }
    }
    return t;
  };
  h._extend = function() {
    var a, k, o, v;
    o = {};
    a = arguments;
    for (v in a) {
      for (k in a[v]) {
        if ({}.hasOwnProperty.call(a[v], k)) {
          o[k] = a[v][k];
        }
      }
    }
    return o;
  };
  return h;
})());
